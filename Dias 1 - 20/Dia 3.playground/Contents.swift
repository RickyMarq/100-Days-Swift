import UIKit

// OperaÃ§Ãµes aritmeticas bÃ¡sicas

// Soma: +

let PrimeiraPartida = 14
let SegundaPartida = 10

let Final = PrimeiraPartida + SegundaPartida

print(Final)

// SubtraÃ§Ã£o -

let PrimeiroMes = 900
let SegundoMes = 700

let DiferenÃ§a = PrimeiroMes - SegundoMes

print(DiferenÃ§a)

// DivisÃ£o /

let Pirulitos = 10
let Alunos = 4

let DivisÃ£o = Pirulitos / Alunos

print("Cada aluno irÃ¡ receber \(DivisÃ£o) pirulitos")

// MultiplicaÃ§Ã£o

let Dois = 2
let MultiplicaÃ§Ã£o = 1080

let resultado = Dois * MultiplicaÃ§Ã£o

print("O resultado da multiplicaÃ§Ã£o Ã© \(resultado)")

// Operator Overloading

// As operaÃ§Ãµes depedem do tipo delas, ou seja. NÃ£o podemos adicionar uma Int em uma String

// Podemos fazer operaÃ§Ãµes com strings tambÃ©m

let haters = "Odiadores vÃ£o "
let hate = "odiar"

let Gamers = haters + hate

print(Gamers)

// Atalhos para operaÃ§Ãµes.

// Ao combinarmos as operaÃ§Ãµes com "=" criamos um atalho que permite escrever menos cÃ³digo

var Prova = 9

Prova -= 3

print("Por ter colado o aluno levou uma penalizaÃ§Ã£o de 3 pontos e ficou com \(Prova)")

// Isso novamente vale para tudo

let user = "Henrique"

var SaudaÃ§Ã£o = "OlÃ¡ \(user) bom "

SaudaÃ§Ã£o += "dia"

print(SaudaÃ§Ã£o)

// Operadores de Igualdade

// Ã© igual a "=="

let cestas = 10
let cestas2 = 8

cestas == cestas2

// nÃ£o Ã© igual a "!="

cestas != cestas2

// Operadores de ComparaÃ§Ã£o

// Maior

cestas > cestas2
cestas2 >= cestas

// Menor

cestas < cestas2
cestas2 <= cestas2

// Funcionam com Strings tambÃ©m, por terem uma ordem alfabetica.

let nome = "Henrique"
let sobrenome = "Marques"

nome > sobrenome

// CondiÃ§Ãµes

let carta1 = 9
let carta2 = 14

if carta1 + carta2 >= 21 {
    print("Vinte um! eu ganhei")
} else {
    print("Perdi :(")
}

// Podemos escrever condiÃ§Ãµes mais complexas tambÃ©m

if carta1 >= 9 {
    print("JÃ¡ comecei com sorte")
} else if carta1 + carta2 == 21 {
    print("Ganhei, deu 21")
} else {
    print("Perdi")
}

// Operadores de condiÃ§Ãµes

// e = "&&"

let idade = 19
let idade2 = 8

if idade > 18 && idade2 > 18 {
    print("Ambos sÃ£o maiores de idade")
} else {
    print("Um ou ambos sÃ£o menores de idade")
}

// ou = "| |"

if idade > 18 || idade2 > 18 {
    print("Maiores de idade")
}

// && necessita que ambos sejam verdadeiros para prosseguir

// || necessita que apenas um seja verdadeiro para prosseguir

// Apesar de ser raro, devemos saber o que Ã© o operador ternÃ¡rio

// Em que combina trÃªs elementos para fazer outro elemento

let carta3 = 10
let carta4 = 1

print(carta3 == carta4 ? "As cartas sÃ£o iguais" : "As cartas sÃ£o diferentes")

// E mais um artefÃ­cio para economizar linhas de cÃ³digo, jÃ¡ que que podemos fazer o mesmo normalmente

if carta3 == carta4 {
    print("As cartas sÃ£o iguais")
} else {
    print("As cartas sÃ£o diferentes")
}

// Caso tiververmos muitas condiÃ§Ãµes if e else podemos usar o switch

let tempo = "Chuva"


switch tempo {
case "Chuva":
    print("Leve o guarda chuva, pode chover ğŸŒ§")
case "Ensolarado":
    print("Leve o protetor solar ğŸ§´")
    fallthrough
default:
    print("Tenha um bom dia")
    
}

// Caso quisermos que continue executando usamos o fallthrough


// Operadores de Range

// Existindo ...< e ...

// Ã‰ Ãºtil usando junto com o switch

let prova = 5

switch prova {
case 0..<5:
    print("VocÃª foi mal na prova e tirou \(prova) :(")
case 5...7:
    print("VocÃª foi ok na prova e tirou \(prova)")
case 7...10:
    print("VocÃª foi muito bem na prova e tirou \(prova)")
default:
    print("ParabÃ©ns vocÃª concluio a prova")
}

